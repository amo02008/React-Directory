{"version":3,"sources":["utils/API.js","components/GetUsers.jsx","pages/index.jsx","App.js","reportWebVitals.js","index.js"],"names":["axios","get","GetUsers","state","user","columns","field","headerName","width","description","sortable","valueGetter","params","getValue","API","then","res","setState","data","results","map","e","id","login","uuid","firstName","name","first","lastName","last","username","email","phone","console","log","employee","catch","err","message","rows","this","pageSize","Component","Index","style","height","display","flexGrow","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6SAGe,EACH,WACR,OAAOA,IAAMC,IACX,+E,QCFeC,E,4MACnBC,MAAQ,CACNC,KAAM,I,EAGRC,QAAU,CACR,CAAEC,MAAO,KAAMC,WAAY,KAAMC,MAAO,KACxC,CAAEF,MAAO,YAAaC,WAAY,aAAcC,MAAO,KACvD,CAAEF,MAAO,WAAYC,WAAY,YAAaC,MAAO,KACrD,CACEF,MAAO,QACPC,WAAY,QACZC,MAAO,KAET,CAAEF,MAAO,QAASC,WAAY,QAASC,MAAO,KAC9C,CAAEF,MAAO,WAAYC,WAAY,WAAYC,MAAO,KACpD,CACEF,MAAO,WACPC,WAAY,YACZE,YAAa,sDACbC,UAAU,EACVF,MAAO,IACPG,YAAa,SAACC,GAAD,gBACRA,EAAOC,SAAS,cAAgB,GADxB,YAETD,EAAOC,SAAS,aAAe,O,uDAKvC,WAAqB,IAAD,OAClBC,IACGC,MAAK,SAACC,GACL,EAAKC,SAAS,CACZb,KAAMY,EAAIE,KAAKC,QAAQC,KAAI,SAACC,GAAD,MAAQ,CACjCC,GAAID,EAAEE,MAAMC,KACZC,UAAWJ,EAAEK,KAAKC,MAClBC,SAAUP,EAAEK,KAAKG,KACjBC,SAAUT,EAAEE,MAAMO,SAClBC,MAAOV,EAAEU,MACTC,MAAOX,EAAEW,YAIbC,QAAQC,IAAI,EAAK/B,MAAMgC,aAExBC,OAAM,SAACC,GAENA,EAAIC,a,oBAIV,WACE,OACE,mCACE,cAAC,IAAD,CAAUC,KAAMC,KAAKrC,MAAMC,KAAMC,QAASmC,KAAKnC,QAASoC,SAAU,W,GAtDpCC,aA4DtC5B,IAAgBC,MAAM,SAAAC,GAClBiB,QAAQC,IAAIlB,EAAIE,KAAKC,YCrBVwB,MAbf,WACE,OACE,qBAAKC,MAAO,CAAEC,OAAQ,IAAKrC,MAAO,QAAlC,SACE,qBAAKoC,MAAO,CAAEE,QAAS,OAAQD,OAAQ,QAAvC,SACE,qBAAKD,MAAO,CAAEG,SAAU,GAAxB,SAEE,cAAC,EAAD,WCxBKC,MATf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC,EAAD,OCKSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBrC,MAAK,YAAkD,IAA/CsC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.a3ebbab1.chunk.js","sourcesContent":["import axios from 'axios';\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default {\n  getUsers: function () {\n    return axios.get(\n      'https://randomuser.me/api/?inc=name,email,phone,login,id&results=10&nat=us'\n    );\n  },\n};\n\n","import React, { Component } from \"react\";\nimport { DataGrid } from \"@material-ui/data-grid\";\nimport API from \"../utils/API\";\n\nexport default class GetUsers extends Component {\n  state = {\n    user: [],\n  };\n\n  columns = [\n    { field: \"id\", headerName: \"ID\", width: 130 },\n    { field: \"firstName\", headerName: \"First name\", width: 130 },\n    { field: \"lastName\", headerName: \"Last name\", width: 130 },\n    {\n      field: \"email\",\n      headerName: \"Email\",\n      width: 280,\n    },\n    { field: \"phone\", headerName: \"Phone\", width: 160 },\n    { field: \"username\", headerName: \"Username\", width: 130 },\n    {\n      field: \"fullName\",\n      headerName: \"Full name\",\n      description: \"This column has a value getter and is not sortable.\",\n      sortable: false,\n      width: 160,\n      valueGetter: (params) =>\n        `${params.getValue(\"firstName\") || \"\"} ${\n          params.getValue(\"lastName\") || \"\"\n        }`,\n    },\n  ];\n\n  componentDidMount() {\n    API.getUsers()\n      .then((res) => {\n        this.setState({\n          user: res.data.results.map((e) => ({\n            id: e.login.uuid,\n            firstName: e.name.first,\n            lastName: e.name.last,\n            username: e.login.username,\n            email: e.email,\n            phone: e.phone,\n          })),\n        });\n        // eslint-disable-next-line\n        console.log(this.state.employee);\n      })\n      .catch((err) => {\n        // eslint-disable-next-line no-unused-expressions\n        err.message;\n      });\n  }\n\n  render() {\n    return (\n      <>\n        <DataGrid rows={this.state.user} columns={this.columns} pageSize={10} />\n      </>\n    );\n  }\n}\n\nAPI.getUsers ().then (res => {\n    console.log(res.data.results)\n   \n})\n\n\n// const rows = [\n//   { id: 1, lastName: 'Snow', firstName: 'Jon', age: 35 },\n//   { id: 2, lastName: 'Lannister', firstName: 'Cersei', age: 42 },\n//   { id: 3, lastName: 'Lannister', firstName: 'Jaime', age: 45 },\n//   { id: 4, lastName: 'Stark', firstName: 'Arya', age: 16 },\n//   { id: 5, lastName: 'Targaryen', firstName: 'Daenerys', age: null },\n//   { id: 6, lastName: 'Melisandre', firstName: null, age: 150 },\n//   { id: 7, lastName: 'Clifford', firstName: 'Ferrara', age: 44 },\n//   { id: 8, lastName: 'Frances', firstName: 'Rossini', age: 36 },\n//   { id: 9, lastName: 'Roxie', firstName: 'Harvey', age: 65 },\n// ];\n\n// export default GetUsers","import React from 'react';\nimport GetUsers from '../components/GetUsers';\n// import { DataGrid } from '@material-ui/data-grid';\n// import Typography from '@material-ui/core/Typography';\n// import Box from '@material-ui/core/Box';\n\n\n\n// function Index() {\n//     // eslint-disable-next-line no-undef\n//     const { data } = useGetUsers({\n//       rowLength: 6,\n//       maxColumns: 10,\n//     });\n\n//     return (\n//       <div style={{ height: 400, width: '100%' }}>\n//         <div style={{ display: 'flex', height: '100%' }}>\n//           <div style={{ flexGrow: 1 }}>\n//             <DataGrid {...data} />\n//           </div>\n//         </div>\n//       </div>\n//     );\n//   }\n\n\n\n\n\n\nfunction Index() {\n  return (\n    <div style={{ height: 400, width: '100%' }}>\n      <div style={{ display: 'flex', height: '100%' }}>\n        <div style={{ flexGrow: 1 }}>\n\n          <GetUsers />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Index ","import './App.css';\n\nimport Index from \"./pages/index\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Index />\n    </div>\n  );\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}